create virtual environment: python -m venv .venv
Activate virtual environment: .venv\Scripts\activate
How to activate .env file: pip install python-dotenv then from dotenv import load_dotenv then add this function load_dotenv()  # Load variables from .env into the environment
Run the requirement.txt file: pip install -r requirements.txt
create requirement.txt file: pip freeze > requirements.txt
to run the program : streamlit run main.py

GIT PUSH Steps: 
In the terminal, initialize a new Git repository: git init
Add all files in your folder to the staging area: git add .
Commit the files with a message: git commit -m "Initial commit"
Link your local repository to the GitHub repository you mentioned (first time required): git remote add origin https://github.com/tosurajitc/ticket_analysis.git
Push the changes to the remote repository: git push -u origin master

If git hub fails then:
git remote rename origin old-origin
git remote add origin https://github.com/tosurajitc/Agentic_Ticket_Anaolysis.git

Streamlit: https://tosurajitc-agentic-ticket-anaolysis-app-bf8nh3.streamlit.app/



incident_analytics/
│
├── main.py                      # Main application entry point
├── .env                         # Environment variables
├── requirements.txt             # Dependencies
│
├── config/
│   ├── __init__.py
│   ├── config.py                # Configuration management
│   └── constants.py             # Application constants
│
├── data/
│   ├── __init__.py
│   ├── data_loader.py           # Data loading and preprocessing
│   ├── data_processor.py        # Data transformation
│   └── data_validator.py        # Data validation
│
├── models/
│   ├── __init__.py
│   ├── llm_manager.py           # LLM integration
│   ├── clustering.py            # Pattern detection
│   ├── anomaly_detection.py     # Anomaly detection
│   └── forecasting.py           # Predictive analytics
│
├── analysis/
│   ├── __init__.py
│   ├── insights_generator.py    # Core insights generation
│   ├── automation_detector.py   # Automation opportunity detection
│   ├── resource_optimizer.py    # Resource optimization
│   └── root_cause_analyzer.py   # Root cause analysis
│
├── visualization/
│   ├── __init__.py
│   ├── chart_generator.py       # Chart generation utilities
│   ├── dashboard_builder.py     # Dashboard component builder
│   └── interactive_elements.py  # Interactive UI components
│
└── ui/
    ├── __init__.py
    ├── app.py                   # Main Streamlit app
    ├── components.py            # Reusable UI components
    ├── pages/
    │   ├── __init__.py
    │   ├── landing_page.py      # Main dashboard
    │   ├── insights_page.py     # AI-generated insights
    │   ├── automation_page.py   # Automation opportunities
    │   ├── resource_page.py     # Resource optimization
    │   └── conversation_page.py # Conversational interface
    └── utils/
        ├── __init__.py
        ├── session_state.py     # Session state management
        └── ui_helpers.py        # UI utility functions